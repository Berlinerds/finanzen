<?php

/**
 * @file
 *
 * Finanzen module
 */

/**
 * Implements hook_menu().
 */
function finanzen_menu() {

  $items = array();
  
  /* --- MAIN PAGE --- */
  
  $items['finanzen'] = array(
    'title' => t('Finanzen'),
    'menu_name' => 'features',
    'page callback' => 'finanzen_mainpage',
    'access arguments' => array('administer finanzen'),
	'type' => MENU_NORMAL_ITEM,
  );
  
  /* --- REPORTS -- */
      
  $items['finanzen/reports'] = array(
    //'title' => t('Finanzen monthly reports'),
    'page callback' => 'finanzen_reports',
    'access arguments' => array('administer finanzen'),
	'type' => MENU_CALLBACK,
  );
  
  $items['finanzen/reports/project/%/%'] = array(
    //'title' => t('Finanzen yearly detail report for project'),
    'page callback' => 'finanzen_reports_project_detail',
    'page arguments' => array ( 3,4 ),
    'access arguments' => array('administer finanzen'),
	'type' => MENU_CALLBACK,
  );
  
  $items['finanzen/reports/projects/general'] = array(
    'page callback' => 'finanzen_reports_project_general',
    'access arguments' => array('administer finanzen'),
	'type' => MENU_CALLBACK,
  );
  
  /* --- PROJECTS --- */
  
  $items['finanzen/project/edit-contract/%'] = array(
    //'title' => t('Project Contract details'),
    'page callback' => 'finanzen_project_edit_contract',
    'page arguments' => array ( 3 ),
    'access arguments' => array('administer finanzen'),
	'type' => MENU_CALLBACK,
  );
  
  /* --- TIMESHEET -- */
  
  $items['timesheet'] = array(
    'title' => t('Timesheet'),
    'menu_name' => 'features',
    'page callback' => 'finanzen_timesheet',
    'access arguments' => array('add hours to projects'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'finanzen.timesheet.inc',
  );
  
  $items['timesheet/month/%'] = array (
    'title' => t('Finanzen timesheet'),
    'description' => 'Timesheet',
    'page callback' => 'finanzen_timesheet_month',
    'page arguments' => array ( 2 ),
    'access arguments' => array('add hours to projects'),
    'type' => MENU_CALLBACK,
        'file' => 'finanzen.timesheet.inc',
  );
  
  $items['timesheet/insert/%/%/%'] = array (
    'title' => t('Add hours to Project'),
    'page callback' => 'finanzen_timesheet_insert',
    'page arguments' => array ( 2, 3, 4 ),
    'access arguments' => array('add hours to projects'),
    'type' => MENU_CALLBACK,
    'file' => 'finanzen.timesheet.inc',
  );
  
  $items['timesheet/update/%/%'] = array (
    'title' => t('Add hours to Project'),
    'page callback' => 'finanzen_timesheet_update',
    'page arguments' => array ( 2, 3 ),
    'access arguments' => array('add hours to projects'),
    'type' => MENU_CALLBACK,
    'file' => 'finanzen.timesheet.inc',
  );  
  
  $items['timesheet/edit-month/%'] = array (
    'title' => t('Modify Whole Month'),
    'page callback' => 'finanzen_timesheet_edit_month',
    'page arguments' => array ( 2 ),
    'access arguments' => array('add hours to projects'),
    'type' => MENU_CALLBACK,
    'file' => 'finanzen.timesheet.inc',
  ); 
    
  $items['finanzen/outflow/personal/general'] = array (
    //'title' => t('Jahresübersicht Personalkosten + Projektbezogene Ausgaben'),
    'page callback' => 'finanzen_outflow_personal_general',
    'access arguments' => array('administer finanzen'),
    'type' => MENU_CALLBACK,
    'file' => 'finanzen.outflow.inc',
  ); 

  $items['finanzen/outflow/personal/edit-month/%'] = array (
    //'title' => t('Modify outflow in personal per month'),
    'page callback' => 'finanzen_outflow_personal_edit_month',
    'page arguments' => array ( 4 ),
    'access arguments' => array('administer finanzen'),
    'type' => MENU_CALLBACK,
    'file' => 'finanzen.outflow.inc',
  ); 
  
   /* --- OUTFLOW PERSONAL EXTERN -- */

  $items['finanzen/outflow/personal/extern/%'] = array (
    //'title' => t('Modify outflow in extern personal per month'),
    'page callback' => 'finanzen_outflow_personal_extern',
    'page arguments' => array ( 4 ),
    'access arguments' => array('administer finanzen'),
    'type' => MENU_CALLBACK,
    'file' => 'finanzen.outflow.inc',
  ); 
  
  /* Lista de trabajadores externos */
  $items['finanzen/outflow/personal/extern/list'] = array(
    //'title' => t('Finanzen outflow personal extern register'),
    'page callback' => 'finanzen_outflow_personal_extern_list',
    'access arguments' => array('administer finanzen'),
	'type' => MENU_CALLBACK,
	'file' => 'finanzen.outflow.inc',
  );
  
  $items['finanzen/outflow/personal/extern/change_status/%/%'] = array(
    //'title' => t('Finanzen outflow personal activate/deactivate extern'),
    'page callback' => 'finanzen_outflow_personal_extern_change_status',
    'page arguments' => array ( 5,6 ),
    'access arguments' => array('administer finanzen'),
	'type' => MENU_CALLBACK,
	'file' => 'finanzen.outflow.inc',
  );
  
  $items['finanzen/outflow/personal/extern/edit/%'] = array (
    'page callback' => 'finanzen_outflow_personal_extern_edit',
    'page arguments' => array ( 5 ),
    'access arguments' => array('administer finanzen'),
    'type' => MENU_CALLBACK,
    'file' => 'finanzen.outflow.inc',
  );

  $items['finanzen/outflow/personal/extern/delete/confirmation/%'] = array (
    'page callback' => 'finanzen_outflow_personal_extern_delete_confirmation',
    'page arguments' => array ( 6 ),
    'access arguments' => array('administer finanzen'),
    'type' => MENU_CALLBACK,
    'file' => 'finanzen.outflow.inc',
  );
  
  $items['finanzen/outflow/personal/extern/delete/%'] = array (
    'page callback' => 'finanzen_outflow_personal_extern_delete',
    'page arguments' => array ( 5 ),
    'access arguments' => array('administer finanzen'),
    'type' => MENU_CALLBACK,
    'file' => 'finanzen.outflow.inc',
  );
  
  /* --- OUTFLOW SONSTIGES --- */
  
  $items['finanzen/outflow/sonstiges/general'] = array (
    //'title' => t('Jahresübersicht Bürokosten'),
    'page callback' => 'finanzen_outflow_sonstiges_general',
    'access arguments' => array('administer finanzen'),
    'type' => MENU_CALLBACK,
    'file' => 'finanzen.outflow.inc',
  ); 
  
  $items['finanzen/outflow/sonstiges/edit-month/%'] = array (
    //'title' => t('Modify outflow in sonstiges per month'),
    'page callback' => 'finanzen_outflow_sonstiges_edit_month',
    'page arguments' => array ( 4 ),
    'access arguments' => array('administer finanzen'),
    'type' => MENU_CALLBACK,
    'file' => 'finanzen.outflow.inc',
  ); 
  
  $items['finanzen/outflow/sonstiges/categories'] = array(
    //'title' => t('Finanzen outflow sonstiges categories'),
    'page callback' => 'finanzen_outflow_sonstiges_categories',
    'access arguments' => array('administer finanzen'),
	'type' => MENU_CALLBACK,
	'file' => 'finanzen.outflow.inc',
  );
  
  $items['finanzen/outflow/sonstiges/categories/change_status/%/%'] = array(
    //'title' => t('Finanzen outflow sonstiges activate/deactivate category'),
    'page callback' => 'finanzen_outflow_sonstiges_categories_change_status',
    'page arguments' => array ( 5,6 ),
    'access arguments' => array('administer finanzen'),
	'type' => MENU_CALLBACK,
	'file' => 'finanzen.outflow.inc',
  );
  
  /* --- INFLOW -- */
      
  $items['finanzen/inflow/general'] = array(
    //'title' => t('Jahresübersicht Ausgangsrechnungen'),
    'page callback' => 'finanzen_inflow_general',
    'access arguments' => array('administer finanzen'),
	'type' => MENU_CALLBACK,
	'file' => 'finanzen.inflow.inc',
  );
  
  $items['finanzen/inflow'] = array(
    //'title' => t('Monatsübersicht Ausgangsrechnungen'),
    'page callback' => 'finanzen_inflow',
    'access arguments' => array('administer finanzen'),
	'type' => MENU_CALLBACK,
	'file' => 'finanzen.inflow.inc',
  );
  
  $items['finanzen/inflow/all'] = array(
    //'title' => t('Zusammenstellung der Rechnungen'),
    'page callback' => 'finanzen_inflow_all',
    'access arguments' => array('administer finanzen'),
	'type' => MENU_CALLBACK,
	'file' => 'finanzen.inflow.inc',
  );
  
  $items['finanzen/inflow/edit/%'] = array (
    'page callback' => 'finanzen_inflow_edit',
    'page arguments' => array ( 3 ),
    'access arguments' => array('administer finanzen'),
    'type' => MENU_CALLBACK,
    'file' => 'finanzen.inflow.inc',
  );

  $items['finanzen/inflow/delete/confirmation/%'] = array (
    'page callback' => 'finanzen_inflow_delete_confirmation',
    'page arguments' => array ( 4 ),
    'access arguments' => array('administer finanzen'),
    'type' => MENU_CALLBACK,
    'file' => 'finanzen.inflow.inc',
  );
  
  $items['finanzen/inflow/delete/%'] = array (
    'page callback' => 'finanzen_inflow_delete',
    'page arguments' => array ( 3 ),
    'access arguments' => array('administer finanzen'),
    'type' => MENU_CALLBACK,
    'file' => 'finanzen.inflow.inc',
  );
  
  $items['finanzen/inflow/change_status/%'] = array (
    'page callback' => 'finanzen_inflow_change_payment_status',
    'page arguments' => array ( 3 ),
    'access arguments' => array('administer finanzen'),
    'type' => MENU_CALLBACK,
    'file' => 'finanzen.inflow.inc',
  );

  return $items;
}

/* Constants definition */
// Initial tool date: 01.01.2013
define("ABSOLUTE_INITIAL_TIME", "1356994800");

/**
* Implements hook_perm().
*/
function finanzen_perm ()
{
  return array ('administer finanzen', 'add hours to projects');
}

/**
* Implements hook_init().
*/
function finanzen_init(){
  drupal_add_css(drupal_get_path('module', 'finanzen') .'/css/finanzen.css');
  drupal_add_js(drupal_get_path('module', 'finanzen') .'/js/finanzen.js');
}

/**
 * Implements hook_theme().
 */
function finanzen_theme() {
  return array (
    'finanzen_timesheet_edit_month_form_theme' => array('arguments' => array('form' => NULL)),
    'finanzen_outflow_personal_edit_month_form_theme' => array('arguments' => array('form' => NULL)),
    'finanzen_outflow_sonstiges_edit_month_form_theme' => array('arguments' => array('form' => NULL)),
    'finanzen_outflow_personal_extern_form_theme' => array('arguments' => array('form' => NULL)),
    'finanzen_project_edit_contract_form_theme' => array('arguments' => array('form' => NULL))
  );
}

/**
 * Implements hook_preprocess_page().
 */
function finanzen_preprocess_page(&$vars) 
{
  global $user;

  $space = module_exists('spaces') ? spaces_get_space() : FALSE;
  
  foreach ($vars['primary_links'] as $k => &$link) {
    if (($link['title'] == 'Finanzen') && ($space->type == 'og')) {
      unset($vars['primary_links'][$k]);
    }
    //else if (($link['title'] == 'Timesheet') && ($space->type == 'og')) {
    else if (($link['title'] == 'Timesheet') && (($space->type == 'og') || (in_array("administrator", $user->roles)))) {
      unset($vars['primary_links'][$k]);
    }
  }  
}

/* ------------------------------------------------------------------------------ */
/* ------------------------------ MAIN FUNCTION --------------------------------- */
/* ------------------------------------------------------------------------------ */

/**
 * Main Page Finanzen (just for administrators)
 */
function finanzen_mainpage( $date = 0 ) {
  
  _finanzen_detect_errors();
  
  if ($date == 0) {
    $current_date = time ();
    $first_day_year = _finanzen_first_day_year($current_date);
  }
  else { $first_day_year = _finanzen_first_day_year($date); }
  
  $current_year = _finanzen_get_year($first_day_year);
  			   
  $content .= _finanzen_year_reports_navigator($first_day_year);
  
  //$content .= '<div class="finanzen-title-table">Gesamt</div>';
  
  $content .= finanzen_reports_year($first_day_year);
  $content .= '</br><div class="finanzen-title-table">Leistungsübersicht nach Projekt</div>';
  $content .= finanzen_reports_summary_projects($first_day_year);
  
  return $content;
}

/* ------------------------------------------------------------------------------ */
/* ----------------------- GENERAL AUXILIAR FUNCTIONS --------------------------- */
/* ------------------------------------------------------------------------------ */

function _finanzen_detect_errors() {
  
  /* Falta profile en usuario */
  $query = "SELECT uid, name FROM users WHERE uid!=0";
  $queryResult = db_query ($query);

  while ($current_user = db_fetch_object($queryResult)) {
    $query2 = "SELECT * FROM node WHERE type='profile' AND uid=" . $current_user->uid;
    $queryResult2 = db_query ($query2);
    if (db_affected_rows() == 0)
      drupal_set_message("User " . $current_user->name . " do not has profile. 
                          FINANZEN needs this info to distinguish between Freelacers and Employes.
                          Create it <a target='_blank' href='/user/" . $current_user->uid . "/edit/profile'>here</a>.", "warning");
  }
}

/**
 * This function calculates next month in the calendar 
 */
function _finanzen_get_next_month(&$month, &$year)
{ 
  if ($month == 12) { $year++; $month=1; } else { $month++; }
}

/**
 * This function calculates previous month in the calendar 
 */
function _finanzen_get_previous_month(&$month, &$year)
{ 
  if ($month == 1) { $year--; $month=12; } else { $month--; }
}

/**
 * This function calculates the first day of the current year for a given $date
 */
function _finanzen_first_day_year($date)
{
  $year = date('Y', $date);
  return mktime(0,0,0,1, 1, $year);
}

/**
 * This function calculates the first day of the current year for a given $date
 */
function _finanzen_get_first_day_next_year($date)
{
  $year = date('Y', $date);
  $year++;
  return mktime(0,0,0,1, 1, $year);
}

/**
 * This function calculates the first day of the current month for a given $date
 */
function _finanzen_first_day_month($date)
{
  $month = date('m', $date);
  $year = date('Y', $date);
  return mktime(0,0,0,$month, 1, $year);
}

/**
 * This function calculates next months first day in unix timestamp
 */
function _finanzen_get_first_day_next_month($date)
{
  $month = date('m', $date);
  $year = date('Y', $date);
  _finanzen_get_next_month($month, $year);
  return mktime(0,0,0,$month, 1, $year);
} 

/**
 * This function calculates previous months first day in unix timestamp
 */
function _finanzen_get_first_day_previous_month($date)
{
  $month = date('m', $date);
  $year = date('Y', $date);
  _finanzen_get_previous_month($month, $year);
  return mktime(0,0,0,$month, 1, $year);
} 

/**
 * This function calculates previous months first day in unix timestamp
 */
function _finanzen_get_first_day_previous_year($date)
{
  $year = date('Y', $date);
  $year--;
  return mktime(0,0,0,1, 1, $year);
} 

function _finanzen_get_year($date)
{
  $year = date('Y', $date);
  return $year;
} 

/**
 * This function calculates if the given date is weekend day
 */
function _finanzen_is_weekend($date)
{
  $weekday = date('N', $date);
  if ($weekday > 5) { return TRUE; } else { return FALSE; }
} 

/**
 * This function calculates how many days has a given month
 */
function _finanzen_days_in_month($month, $year)
{ 
  // calculate number of days in a month
  return $month == 2 ? ($year % 4 ? 28 : ($year % 100 ? 29 : ($year % 400 ? 28 : 29))) : (($month - 1) % 7 % 2 ? 30 : 31); 
} 

/**
 * This function calculates how many days has a given month
 */
function _finanzen_get_project_code($project_id)
{ 
  $project_node = node_load ($project_id);
  return ($project_node->field_project_code[0]["value"]);
} 

/**
 * Get user name per a given id
 */
function _finanzen_get_user_name($id) {
  $user = user_load($id);
  return $user->name;
}

/**
 * Get extern name per a given id
 */
function _finanzen_get_extern_name($id) {
  $query = "SELECT name FROM finanzen_outflow_worker_extern WHERE nid=" . $id;
  $queryResult = db_query ( $query );
  $name = db_fetch_object($queryResult)->name;
  return $name;
}

function _finanzen_list_months_year ($first_day_month, $type = 0 ) {
  
  switch ($type) {
	  case 1: // Outflow Personal
	    $edit_link = "/finanzen/outflow/personal/edit-month/";
	    break;
	  
	  case 2: // Outflow Sonstiges
	    $edit_link = "/finanzen/outflow/sonstiges/edit-month/";
	    break;
	  
	  case 3: // Inflow
	    $edit_link = "/finanzen/inflow/";
	    break;
	    
	  case 4:
	    $edit_link = "/finanzen/outflow/personal/extern/";
	    break;
	    
	  default:
	    $edit_link = "";
  } 
  
  $result = array();
  $current_date = time();
  $first_day_next_year = _finanzen_get_first_day_next_year($first_day_month);
  $ref_date = _finanzen_first_day_year($first_day_month);
  
  //if ($first_day_next_year < $current_date) { // año ya acabado
	 while ($first_day_next_year > $ref_date ) {
	 	$month_name = date('M', $ref_date);
	 	if (empty($edit_link)) {
	 		$whole_edit_link = $month_name;
	 	}
	 	else {
  	 		$whole_edit_link = $month_name . ' <a href="' . $edit_link . $ref_date . '"><img class="edit-pencil" src="/' 
                               . drupal_get_path('module', 'finanzen') . '/img/pencil.png" /></a>';
	 	}
	 	$result[$month_name] = array('data' => $whole_edit_link,
                      				 'date' => $ref_date, 
                      				 'class' => 'column_money');
	 	$ref_date = _finanzen_get_first_day_next_month($ref_date);
	 }
  /*
  }
  else { // año actual
	 $current_date_first_day_next_month = _finanzen_get_first_day_next_month($current_date);
	 while ($current_date_first_day_next_month > $ref_date ) {
	 	$month_name = date('M', $ref_date);
	 	if (empty($edit_link)) {
	 		$whole_edit_link = $month_name;
	 	}
	 	else {
  	 		$whole_edit_link = $month_name . ' <a href="' . $edit_link . $ref_date . '"><img class="edit-pencil" src="/' 
                               . drupal_get_path('module', 'finanzen') . '/img/pencil.png" /></a>';
	 	}
	 	$result[$month_name] = array('data' => $whole_edit_link,
                                     'date' => $ref_date, 
                                     'class' => 'column_money');
	 	$ref_date = _finanzen_get_first_day_next_month($ref_date);
	 } 
  }
  */
  
  return $result;
}

function _finanzen_list_months($init_date, $end_date) {
	$result = array();
	$ref_date = $init_date;
	
	while ($end_date >= $ref_date ) {
	  $month_name = date('MY', $ref_date);
	  $result[$month_name] = array('data' => $month_name,
                      			   'date' => $ref_date,
                      			   'class' => 'column_money');
	  $ref_date = _finanzen_get_first_day_next_month($ref_date);
	}
	
	return $result;
}

function _finanzen_outflow_sonstiges_get_category_name ($id) {
	$query = "SELECT name FROM finanzen_outflow_sonstiges_categories WHERE nid=" . $id;
	$queryResult = db_query ( $query );
	if ($cat = db_fetch_object($queryResult))
	  $res = $cat->name;
	else
	  $res = "ERROR";
	  
	return $res;
}

function _finanzen_outflow_personal_extern_get_extern_name ($id) {
	$query = "SELECT name FROM finanzen_outflow_worker_extern WHERE nid=" . $id;
	$queryResult = db_query ( $query );
	if ($ext = db_fetch_object($queryResult))
	  $res = $ext->name;
	else
	  $res = "ERROR";
	  
	return $res;
}

function _finanzen_get_coef_projects_month ($months_curr_year) {
	
	$coefs = array();
	
	foreach ($months_curr_year as $month_name => $month_data) {
		$total_hours_month = array();
		$total_user_hours_month = array();
		
		$date = $month_data['date'];
	
		$query = "SELECT uid, project_id, hours FROM finanzen_timesheet_worker_hours_projects 
			  	  WHERE date>=" . $date . " AND date<" . _finanzen_get_first_day_next_month($date);
			  	  
		$queryResult = db_query ( $query );
	    while ($assignation = db_fetch_object($queryResult)) {
	    	$total_hours_month['#value'] += $assignation->hours;
	    	$total_hours_month[$assignation->project_id]['#value'] += $assignation->hours;
	    	$total_hours_month[$assignation->project_id][$assignation->uid]['#value'] += $assignation->hours;
	    	$total_user_hours_month[$assignation->uid]['#value'] += $assignation->hours;
		}
		
		if ($total_hours_month['#value'])
			$coefs[$month_name]['#total_hours'] = $total_hours_month['#value'];
		
		foreach (element_children($total_hours_month) as $project_id) {
			$coefs[$month_name][$project_id]['#coef'] = $total_hours_month[$project_id]['#value'] / $total_hours_month['#value'];
			foreach (element_children($total_hours_month[$project_id]) as $user_id) {
			  $coefs[$month_name][$project_id][$user_id] =  
			    $total_hours_month[$project_id][$user_id]['#value'] / $total_user_hours_month[$user_id]['#value'];
			}
		}
	}

	return $coefs;
	
}

function _finanzen_format_number($number) {
	return number_format($number, 2, ".", ",") . " €";
}

function _finanzen_format_percent($number) {
	return number_format($number, 2, ",", ".") . "%";
}

function _finanzen_date_first_outflow_project($project_id) {
	$query = "SELECT date FROM finanzen_timesheet_worker_hours_projects WHERE project_id=" . $project_id . 
	         " ORDER BY date ASC LIMIT 1";
	$queryResult = db_query ( $query );
	if ($elem = db_fetch_object($queryResult))
	  $result = $elem->date;
	else
	  $result = 0;
	
	return $result;
}

function _finanzen_date_last_outflow_project($project_id) {
	$query = "SELECT date FROM finanzen_timesheet_worker_hours_projects WHERE project_id=" . $project_id . 
	         " ORDER BY date DESC LIMIT 1";
	$queryResult = db_query ( $query );
	if ($elem = db_fetch_object($queryResult))
	  $result = $elem->date;
	else
	  $result = 0;
	  	
	return $result;
}

function _finanzen_link_to_project ($project_id, $date = 0) {
  
  if ($date == 0) {
    $current_date = time ();
    $first_day_year = _finanzen_first_day_month($current_date);
  }
  else 
    $first_day_year = _finanzen_first_day_month($date);
    
  $project_code = _finanzen_get_project_code($project_id); 
  $link_to_project = '<a href="/finanzen/reports/project/' . $first_day_year . 
                     '/' . $project_id .'"><b>' . $project_code . '</b></a>';
  
  return $link_to_project;
}

function _finanzen_get_total_invoices_month($date, &$total_paid, &$total_unpaid) {
  $query = "SELECT * FROM finanzen_inflow 
            WHERE date>=" . $date . " AND date<" . _finanzen_get_first_day_next_month($date);
  $queryResult = db_query ($query);
  
  while ($current_invoice = db_fetch_object($queryResult)) {
    if ($current_invoice->paid == 0)
      $total_unpaid += $current_invoice->spend;
    else 
      $total_paid += $current_invoice->spend;
  }
}

function _finanzen_get_total_outflow_personal_month($date, &$total) {
  $query = "SELECT uid, spend FROM finanzen_outflow_worker_month 
  			WHERE date>=" . $date . " AND date<" . _finanzen_get_first_day_next_month($date);
  $queryResult = db_query ( $query );	  
  
  while ($outflow = db_fetch_object($queryResult)) {
    $total += $outflow->spend;
  }
}

function _finanzen_get_total_outflow_extern_month($date, &$total) {
  $query = "SELECT * FROM finanzen_outflow_worker_extern_month 
            WHERE date>=" . $date . " AND date<" . _finanzen_get_first_day_next_month($date);
  $queryResult = db_query ($query);
  
  while ($current_invoice = db_fetch_object($queryResult)) {
      $total += $current_invoice->spend;
  }
}

function _finanzen_get_total_outflow_sonstiges_month($date, &$total) {
  $query = "SELECT spend FROM finanzen_outflow_sonstiges_month 
	  		WHERE date>=" . $date . " AND date<" . _finanzen_get_first_day_next_month($date);
  $queryResult = db_query ( $query );	  
  
  while ($outflow = db_fetch_object($queryResult)) {
	  $total += $outflow->spend;
  }
}

/* ------------------------------------------------------------------------------ */
/* ---------------------------- REPORT FUNCTIONS -------------------------------- */
/* ------------------------------------------------------------------------------ */

/**
 * This function prints the summary for a given user and date
 */
function _finanzen_reports_summary_user_month($user_id, $date, &$total)
{ 
  $query = "SELECT * FROM {finanzen_timesheet_worker_hours_projects} fuhp
            WHERE fuhp.uid=%d AND fuhp.date>=%d AND fuhp.date<%d ORDER BY fuhp.project_id";
  $queryResult = db_query ( $query, $user_id , $date, _finanzen_get_first_day_next_month($date));
  
  while ($assignation = db_fetch_object($queryResult)){
    $summary[$assignation->project_id] = $summary[$assignation->project_id] + $assignation->hours;
  }
  
  foreach (element_children($summary) as $project_id) {
    $total = $total + $summary[$project_id];
    $content .= '<span class="summary-project-month"><b>' . _finanzen_get_project_code($project_id) .
                '</b>: ' . round($summary[$project_id], 2) . ' hours</span>';
  }
  
  if (empty($content)) { $content = "Empty"; }

  return $content;
}

/**
 * This function prints the summary for a given project and date
 */
function _finanzen_reports_summary_project_month($project_id, $date, &$total)
{ 
  $query = "SELECT * FROM {finanzen_timesheet_worker_hours_projects} fuhp
            WHERE fuhp.project_id=%d AND fuhp.date>=%d AND fuhp.date<%d"; // ORDER BY fuhp.project_id";
  $queryResult = db_query ( $query, $project_id , $date, _finanzen_get_first_day_next_month($date));
  
  while ($assignation = db_fetch_object($queryResult)){
    $summary[$assignation->uid] = $summary[$assignation->uid] + $assignation->hours;
  }
  
  foreach (element_children($summary) as $user_id) {
    $total = $total + $summary[$user_id];
    $content .= '<span class="summary-project-month"><b>' . _finanzen_get_user_name($user_id) .
                '</b>: ' . round($summary[$user_id], 2) . ' hours</span>';
  }
  
  if (empty($content)) { $content = "Empty"; }

  return $content;
}

/**
 * This function outputs a Finanzen month navigator
 */
function _finanzen_reports_navigator($date)
{ 
  $current_date = time ();
  $current_first_day_month = _finanzen_first_day_month($current_date);
  // Init tool date -> 01.01.2014
  //$initial_time = "1388530800";
  
  $content .= '<div class="navigator">';
  
  $content .= '<div class="navigator-next">';
  if ($date < $current_first_day_month) {
	$content .= '<a title="Go to next month" href="/finanzen/reports/' 
	            . _finanzen_get_first_day_next_month($date) . '"> &#8811; </a>';
  }
  else { $content .= '<span class="muted"> &#8811; </span>'; }
  $content .= "</div>";
  
  $content .= '<div class="navigator-date black">' . date('F Y', $date) . '</div>';
   
  $content .= '<div class="navigator-prev">';
  if ($date > ABSOLUTE_INITIAL_TIME) {
  	$content .= '<a title="Go to previous month" href="/finanzen/reports/' 
  	            . _finanzen_get_first_day_previous_month($date) . '"> &#8810; </a>';
  }
  else { $content .= '<span class="muted"> &#8810; </span>'; }
  $content .= "</div>";
  
  $content .= "</div>"; //class="navigator"
   
  return $content;     
}

/**
 * This function outputs a Finanzen month navigator
 */
function _finanzen_year_reports_navigator($date)
{ 
  if ($date == 0) {
    $current_date = time ();
    $first_day_year = _finanzen_first_day_year($current_date);
  }
  else { $first_day_year = _finanzen_first_day_year($date); }

  $current_date = time ();
  $current_first_day_year = _finanzen_first_day_year($current_date);
  
  $content .= '<div class="navigator">';
  
  $content .= '<div class="navigator-next">';
  if ($first_day_year < $current_first_day_year) {
	$content .= '<a title="Go to next month" href="/finanzen/' 
	            . _finanzen_get_first_day_next_year($first_day_year) . '"> &#8811; </a>';
  }
  else { $content .= '<span class="muted"> &#8811; </span>'; }
  $content .= "</div>";
  
  $content .= '<div class="navigator-date black">' . date('Y', $first_day_year) . '</div>'; 
  
  $content .= '<div class="navigator-prev">';
  if ($first_day_year > ABSOLUTE_INITIAL_TIME) {
  	$content .= '<a title="Go to previous month" href="/finanzen/' 
  	            . _finanzen_get_first_day_previous_year($first_day_year) . '"> &#8810; </a>';
  }
  else { $content .= '<span class="muted"> &#8810; </span>'; }
  $content .= "</div>";
  
  $content .= "</div>"; //class="navigator"
   
  return $content;     
}

/**
 * This function outputs a Finanzen month navigator
 */
function _finanzen_reports_project_detail_navigator($date, $project_id)
{ 
  if ($date == 0) {
    $current_date = time ();
    $first_day_year = _finanzen_first_day_year($current_date);
  }
  else { $first_day_year = _finanzen_first_day_year($date); }

  $current_date = time ();
  $current_first_day_year = _finanzen_first_day_year($current_date);
  
  $content .= '<div class="navigator">';
  
  $content .= '<div class="navigator-back"><a href="/finanzen/' . $date . '"> &#8592; zurück</a></div>';
  
  $content .= '<div class="navigator-title bold black">' . _finanzen_get_project_code($project_id) . '</div>';
  
  $content .= '<div class="navigator-next">';
  if ($first_day_year < $current_first_day_year) {
	$content .= '<a title="Go to next month" href="/finanzen/reports/project/' 
	            . _finanzen_get_first_day_next_year($first_day_year) . '/' . $project_id . '"> &#8811; </a>';
  }
  else { $content .= '<span class="muted"> &#8811; </span>'; }
  $content .= "</div>";
  
  $content .= '<div class="navigator-date black">' . date('Y', $first_day_year) . '</div>';
   
  $content .= '<div class="navigator-prev">';
  if ($first_day_year > ABSOLUTE_INITIAL_TIME) {
  	$content .= '<a title="Go to previous month" href="/finanzen/reports/project/' 
  	            . _finanzen_get_first_day_previous_year($first_day_year) . '/' . $project_id . '"> &#8810; </a>';
  }
  else { $content .= '<span class="muted"> &#8810; </span>'; }
  $content .= "</div>";
  
  $content .= "</div>"; //class="navigator"
   
  return $content;     
}


/**
 * Reports Page Finanzen (just for administrators)
 */
function finanzen_reports($date = 0) {

  if ($date == 0) {
    $current_date = time ();
    $first_day_month = _finanzen_first_day_month($current_date);
  }
  else { $first_day_month = $date; }
  
  $content .= _finanzen_reports_navigator($first_day_month);
  
  /* HORAS POR PERSONAS */
  
  $content .= '<div class="finanzen-title-table">Hours per Worker</div>';
  
  $header = array('person' => array('data' => t("Person"),'class' => 'column_person'), 
                  'summary' => t("Summary"), 
                  'total' => array('data' => t("Total"),'class' => 'column_total'));
  
  $query = "SELECT DISTINCT uid FROM {finanzen_timesheet_worker_hours_projects} fuhp
            WHERE fuhp.date>=%d AND fuhp.date<%d ORDER BY fuhp.project_id";
  $queryResult = db_query ( $query, $first_day_month, _finanzen_get_first_day_next_month($first_day_month));
  
  while ($assignation = db_fetch_object($queryResult)){
    $row = array('person' => _finanzen_get_user_name($assignation->uid),
   	             'summary' => _finanzen_reports_summary_user_month($assignation->uid, $first_day_month, $total),
   	             'total' => round($total, 2) . ' hours');
	$rows[] = $row;
	$total = 0;
  }
  
  $content .= theme_table($header, $rows);
  
  /* HORAS POR PROYECTOS */

  $content .= '<div class="finanzen-title-table">Hours per Project</div>';

  $header2 = array('project' => array('data' => t("Project"),'class' => 'column_project'),
                   'summary' => t("Summary"), 
                   'total' => array('data' => t("Total"),'class' => 'column_total'));
  
  $query = "SELECT DISTINCT project_id FROM {finanzen_timesheet_worker_hours_projects} fuhp
            WHERE fuhp.date>=%d AND fuhp.date<%d";// ORDER BY fuhp.project_id";
  $queryResult = db_query ( $query, $first_day_month, _finanzen_get_first_day_next_month($first_day_month));
  
  while ($assignation = db_fetch_object($queryResult)){
    $row2 = array('project' => _finanzen_get_project_code($assignation->project_id),
   	              'summary' => _finanzen_reports_summary_project_month($assignation->project_id, $first_day_month, $total),
   	              'total' => round($total, 2) . ' hours');
	$rows2[] = $row2;
	$total = 0;
  }
  
  $content .= theme_table($header2, $rows2);
  
  return $content;
}

function finanzen_reports_year( $date = 0 ) {
  
  if ($date == 0) {
    $current_date = time ();
    $first_day_year = _finanzen_first_day_year($current_date);
  }
  else { $first_day_year = $date; }
  
  $empty_row = array();
  $empty_row[] = "";
  
  $months_curr_year = _finanzen_list_months_year ($first_day_year);
    
  $header = array('concept' => array('data' => t(""),'class' => 'column_concept')) + 
  			$months_curr_year + array('total' => array('data' => t("Gesamt"),'class' => 'column_total'));
  
  $total_year_zahlungsplan = 0;
  $row_zahlungsplan = array('concept' => array('data' => t("Zahlungsplan"), 'class' => 'not-empty'));
  $total_year_rechnungen = 0;
  $row_rechnungen = array('concept' => array('data' => t("Rechnungen"), 'class' => 'not-empty'));
  $row_differenz = array('concept' => array('data' => t("Differenz"), 'class' => 'not-empty'));
  $total_year_personal = 0;
  $row_personalkosten = array('concept' => array('data' => t("Personalkosten"), 'class' => 'not-empty'));
  $total_year_beratungen = 0;
  $row_beratungen = array('concept' => array('data' => t("Beratungen"), 'class' => 'not-empty'));
  $total_year_buerokosten = 0;
  $row_buerokosten = array('concept' => array('data' => t("Bürokosten"), 'class' => 'not-empty'));
  $row_kosten_gesamt = array('concept' => array('data' => t("Kosten Gesamt"), 'class' => 'not-empty'));
  $total_year_gewinn_euro = 0;
  $row_gewinn_euro = array('concept' => array('data' => t("Gewinn €"), 'class' => 'not-empty'));
  $row_gewinn_prozent = array('concept' => array('data' => t("Gewinn %"), 'class' => 'not-empty'));  
  
  foreach ($months_curr_year as $month_name => $month_data ) {
      
      /* ZAHLUNGSPLAN + RECHUNGEN * DIFFERENZ */
      $month_invoices_paid = 0;
      $month_invoices_unpaid = 0;
	  _finanzen_get_total_invoices_month($month_data['date'], $month_invoices_paid, $month_invoices_unpaid);
	  $month_invoices_total = $month_invoices_paid + $month_invoices_unpaid;
	  $total_year_zahlungsplan += ($month_invoices_paid + $month_invoices_unpaid);
	  $total_year_rechnungen += $month_invoices_paid;
	  $row_zahlungsplan[] = array('data' => _finanzen_format_number($month_invoices_paid + $month_invoices_unpaid), 
	                              'class' => 'not-empty');
	  $row_rechnungen[] = array('data' => _finanzen_format_number($month_invoices_paid), 'class' => 'not-empty');
	  $row_differenz[] = array('data' => _finanzen_format_number($month_invoices_unpaid), 'class' => 'not-empty'); 
	  
	  /* PERSONALKOSTEN */
	  $month_outflow_personal = 0;
	  _finanzen_get_total_outflow_personal_month($month_data['date'], $month_outflow_personal);
	  $total_year_personal += $month_outflow_personal;
	  $row_personalkosten[] = array('data' => _finanzen_format_number($month_outflow_personal), 'class' => 'not-empty');
	  /* BERATUNGEN */
	  $month_outflow_extern = 0;
	  _finanzen_get_total_outflow_extern_month($month_data['date'], $month_outflow_extern);
	  $total_year_beratungen += $month_outflow_extern;
	  $row_beratungen[] = array('data' => _finanzen_format_number($month_outflow_extern), 'class' => 'not-empty');
	  /* BÜROKOSTEN */
	  $month_outflow_sonstiges = 0;
	  _finanzen_get_total_outflow_sonstiges_month($month_data['date'], $month_outflow_sonstiges);
	  $total_year_buerokosten += $month_outflow_sonstiges;
	  $row_buerokosten[] = array('data' => _finanzen_format_number($month_outflow_sonstiges), 'class' => 'not-empty');
	  /* KOSTEN GESAMT */
	  $month_kosten_gesamt = $month_outflow_personal + $month_outflow_extern + $month_outflow_sonstiges;
	  $row_kosten_gesamt[] = array('data' => _finanzen_format_number($month_kosten_gesamt), 'class' => 'not-empty');
	  
	  /* GEWWIN € + GEWWIN % */
	  $month_gewwin_euro = $month_invoices_total - $month_kosten_gesamt;
	  if ($month_gewwin_euro < 0): $css_class = ' red'; else: $css_class = ''; endif;
	  $total_year_gewinn_euro += $month_gewwin_euro;
	  $row_gewinn_euro[] = array('data' => _finanzen_format_number($month_gewwin_euro), 'class' => 'not-empty' . $css_class);
	  if ($month_invoices_paid != 0)
	    $month_gewwin_prozent = (($month_gewwin_euro * 100) / $month_invoices_total);
	  else 
	    $month_gewwin_prozent = 0;
	  if ($month_gewwin_prozent < 0): $css_class = ' red'; else: $css_class = ''; endif;
	  $row_gewinn_prozent[] = array('data' => _finanzen_format_percent($month_gewwin_prozent), 
	                                'class' => 'not-empty' . $css_class);
	  
  }
  
  $row_zahlungsplan['total'] = array('data' => _finanzen_format_number($total_year_zahlungsplan), 
                                     'class' => 'not-empty bold');
  $row_rechnungen['total'] = array('data' => _finanzen_format_number($total_year_rechnungen), 
                                   'class' => 'not-empty bold');
  $total_year_differenz = $total_year_zahlungsplan - $total_year_rechnungen;
  $row_differenz['total'] = array('data' => _finanzen_format_number($total_year_differenz), 
                                  'class' => 'not-empty bold');
  
  $row_personalkosten['total'] = array('data' => _finanzen_format_number($total_year_personal), 
                                       'class' => 'not-empty bold');                                  
  $row_beratungen['total'] = array('data' => _finanzen_format_number($total_year_beratungen), 
                                   'class' => 'not-empty bold');
  $row_buerokosten['total'] = array('data' =>  _finanzen_format_number($total_year_buerokosten), 
                                    'class' => 'not-empty bold');                                  
  $total_year_kosten_gesamt = $total_year_personal + $total_year_beratungen + $total_year_buerokosten;
  $row_kosten_gesamt['total'] = array('data' => _finanzen_format_number($total_year_kosten_gesamt), 
                                      'class' => 'not-empty bold');
  
  if ($total_year_gewinn_euro < 0): $css_class = ' red'; else: $css_class = ''; endif;
  $row_gewinn_euro['total'] = array('data' => _finanzen_format_number($total_year_gewinn_euro), 
                                    'class' => 'not-empty bold' . $css_class);
  if ($total_year_rechnungen>0)
    $total_year_gewwin_prozent = (($total_year_gewinn_euro * 100) / $total_year_rechnungen);
  else
    $total_year_gewwin_prozent = 0;
  if ($total_year_gewwin_prozent < 0): $css_class = ' red'; else: $css_class = ''; endif;
  $row_gewinn_prozent['total'] = array('data' => _finanzen_format_percent($total_year_gewwin_prozent),
                                       'class' => 'not-empty bold' . $css_class);
                            
  $rows[] = $row_zahlungsplan;
  $rows[] = $row_rechnungen;
  $rows[] = array('data' => $row_differenz, 'class' => 'bold light-grey not-empty');
  $rows[] = array('data' => $empty_row, 'class' => 'empty-row');
  $rows[] = $row_personalkosten;
  $rows[] = $row_beratungen;
  $rows[] = $row_buerokosten;
  $rows[] = array('data' => $row_kosten_gesamt, 'class' => 'bold light-grey not-empty');
  $rows[] = array('data' => $empty_row, 'class' => 'empty-row');  
  $rows[] = array('data' => $row_gewinn_euro, 'class' => 'bold grey not-empty');
  $rows[] = array('data' => $row_gewinn_prozent, 'class' => 'bold light-grey not-empty');
  
  $content .= theme_table($header, $rows, array('class' => 'finanzen reports report-year'));
  
  return $content;

}

function _finanzen_get_user_labour_agreement($user_id) {

	$query = "SELECT field_labour_agreement_value FROM content_type_profile
	          INNER JOIN node ON node.type='profile' AND node.uid=" . $user_id . "
	          WHERE node.nid = content_type_profile.nid";
	$queryResult = db_query ($query);

	if (db_affected_rows() == 1) {
	  $agreement_value = db_fetch_object($queryResult);
	  $result = $agreement_value->field_labour_agreement_value;
	}
	else {
	  $result =  "ERROR";
	}
	
	return $result;
}



function finanzen_reports_outflow_sonstiges( $date = 0 ) {
  
  if ($date == 0) {
    $current_date = time ();
    $first_day_month = _finanzen_first_day_month($current_date);
  }
  else { $first_day_month = $date; }
  
  $last_row = array();
  $total_all_categories_year = 0;
  
  $months_curr_year = _finanzen_list_months_year ($first_day_month, 2); 
  $header = array('name' => array('data' => t("Kontobezeichnung"),'class' => 'column_outflow_category')) + 
            $months_curr_year +
            array('total' => array('data' => t("Total"),'class' => 'column_money'));
                    
  $query = "SELECT DISTINCT category_id FROM finanzen_outflow_sonstiges_month 
  			WHERE date>=" . _finanzen_first_day_year($first_day_month) .
		  	" AND date<" . _finanzen_get_first_day_next_year($first_day_month) .
  			" ORDER BY category_id";
  $queryResult = db_query ( $query );
  
  while ($category = db_fetch_object($queryResult)){
    $row = array('name' => array('data' => _finanzen_outflow_sonstiges_get_category_name($category->category_id),  
                                 'class' => 'not-empty'));
    $last_row['name'] = "Gesamt";
    
    $total_category_year = 0;
	
	foreach ($months_curr_year as $month_name => $month_data ) {
		
		$total_category_month = 0;
		if (empty($last_row[$month_name])): $last_row[$month_name] = 0; endif;
		
		$query2 = "SELECT * from finanzen_outflow_sonstiges_month
				   WHERE category_id=" . $category->category_id . " AND date=" . $month_data['date'];
		$queryResult2 = db_query ( $query2 );
		
		while ($outflow = db_fetch_object($queryResult2)) {
			$total_category_month += $outflow->spend;
			$last_row[$month_name] += $outflow->spend;
			$total_category_year += $outflow->spend;
		}
		
		if ($total_category_month > 0)
  		  $row[] = array('data' => _finanzen_format_number($total_category_month), 'class' => 'not-empty');
  		else
		  $row[] = _finanzen_format_number($total_category_month);
	}
	
	$row['total'] = array('data' => _finanzen_format_number($total_category_year), 'class' => 'bold not-empty');
	$rows[] = $row;
	$total_all_categories_year += $total_category_year;
  }

  if ($last_row){
	  foreach ($last_row as $month_name => $month_data){
	       if ($month_name != "name")
			 $last_row[$month_name] = _finanzen_format_number($month_data);
	  }
	  $last_row['total'] = _finanzen_format_number($total_all_categories_year);
  }
  
  $rows[] = array('data' => $last_row, 'class' => 'bold grey not-empty');
  
  $content .= theme_table($header, $rows, array('class' => 'finanzen reports'));

  return $content;
}


//function finanzen_reports_project_basis ($date, $project_id, &$total_studio_year) {
function finanzen_reports_project_basis ($date, $project_id) {
  
  if ($date == 0) {
    $current_date = time();
    $first_day_month = _finanzen_first_day_month($current_date);
  }
  else { $first_day_month = $date; }
  
  $months_curr_year = _finanzen_list_months_year ($first_day_month);
  $coefs = _finanzen_get_coef_projects_month($months_curr_year);
  $project_code = _finanzen_get_project_code($project_id);
  	  
  $rows = array();	  
  $row_gesamt = array();
  $total_project_year = 0;
  $total_inflow_project_year = 0;
  $total_outflow_personal_project_year = 0;
  $total_outflow_personal_extern_project_year = 0;
  $total_outflow_sonstiges_project_year = 0;
	  
  $link_to_project = _finanzen_link_to_project($project_id, $first_day_month);
  $header = array('concept' => array('data' => $link_to_project,'class' => 'column_project')) 
  			+ $months_curr_year + array('total' => array('data' => t("Total"),'class' => 'column_money'));
  $row_inflow = array('concept' => array('data' => "Inflow", 'class' => 'bold not-empty'));
  $row_outflow = array('concept' => array('data' => "Outflow", 'class' => 'bold not-empty'));
  $row_gesamt['name'] = "Gesamt";

  foreach ($months_curr_year as $month_name => $month_data ) {
  	    	  
	  $total_project_month = 0;
	  if (empty($row_gesamt[$month_name])): $row_gesamt[$month_name] = 0; endif;

	  /* --- ROW INFLOW ---- */
	  
	  $query4 = "SELECT * from finanzen_inflow WHERE project_id=" . $project_id . " AND date=" . $month_data['date'];
	  $queryResult4 = db_query ( $query4 );
	  	  	
	  while ($inflow = db_fetch_object($queryResult4)) {
	 	  $total_project_month += $inflow->spend;
	  	  $total_inflow_project_year += $inflow->spend;
	  }
		  
	  if ($total_project_month > 0)
  	    $row_inflow[] = array('data' => _finanzen_format_number($total_project_month), 'class' => 'not-empty');
  	  else
  	    $row_inflow[] = _finanzen_format_number($total_project_month);
		   
	  /* --- OUTFLOW PERSONAL --- */
	  
	  $query5 = "SELECT uid, spend FROM finanzen_outflow_worker_month WHERE date=" . $month_data['date'];
	  $queryResult5 = db_query ( $query5 );
		  
	  $outflow_personal_project_month = 0;
	  while ($outflow = db_fetch_object($queryResult5)) {
	  	  $iteration_user = user_load($outflow->uid);
		  // Si el usuario es un administrador, su coeficiente es el general del proyecto ya que los administradores
		  // no aplican horas a proyectos en el timesheet
		  // Si el usuario no es un administrador, uso su coeficiente particular para cada proyecto
		  if (is_array($iteration_user->roles) && in_array('administrator', $iteration_user->roles)) {
			  $outflow_personal_project_month += ($outflow->spend * $coefs[$month_name][$project_id]['#coef']);
			  $total_outflow_personal_project_year += ($outflow->spend * $coefs[$month_name][$project_id]['#coef']);;
	  	  }
	  	  else {
		  	  $outflow_personal_project_month += ($outflow->spend * $coefs[$month_name][$project_id][$outflow->uid]);
		  	  $total_outflow_personal_project_year += ($outflow->spend * $coefs[$month_name][$project_id][$outflow->uid]);
		  }
	  }
		  		  
	  /* --- OUTFLOW PERSONAL EXTERN --- */
		  
	  $query6 = "SELECT * FROM finanzen_outflow_worker_extern_month 
	             WHERE date=" . $month_data['date'] . " AND project_id=" . $project_id;
	  $queryResult6 = db_query ( $query6 );
		  
	  $outflow_personal_extern_project_month = 0;
	  while ($outflow = db_fetch_object($queryResult6)) {
	  	  $outflow_personal_extern_project_month += $outflow->spend;
	  	  $total_outflow_personal_extern_project_year += $outflow->spend;
	  }
		  
	  /* --- OUTFLOW SONSTIGES --- */
		  
	  $query7 = "SELECT category_id, spend FROM finanzen_outflow_sonstiges_month WHERE date=" . $month_data['date'];
	  $queryResult7 = db_query ( $query7 );
		  
	  $outflow_sontiges_project_month = 0;
	  while ($outflow = db_fetch_object($queryResult7)) {
	  	  $outflow_sontiges_project_month += ($outflow->spend * $coefs[$month_name][$project_id]['#coef']);
	  	  $total_outflow_sonstiges_project_year += ($outflow->spend * $coefs[$month_name][$project_id]['#coef']);
	  }
	  
  	  $summe_outflow_project_month = $outflow_personal_project_month + 
  	  								 $outflow_personal_extern_project_month + 
  	  								 $outflow_sontiges_project_month;
	  
	  if ($summe_outflow_project_month > 0)
	  	$row_outflow[] = array('data' => _finanzen_format_number($summe_outflow_project_month), 
                               'class' => 'not-empty');
	  else 
	    $row_outflow[] = array('data' => _finanzen_format_number(0), 
                               'class' => '');
	  
	  $row_gesamt[$month_name] = $total_project_month - $summe_outflow_project_month;
  }
	  
	  
  $row_inflow['total'] = array('data' => _finanzen_format_number($total_inflow_project_year), 
                               'class' => 'bold not-empty');
  $rows[] = $row_inflow;
  
  $summe_total_outflow_project_year = $total_outflow_personal_project_year + 
  									  $total_outflow_personal_extern_project_year +
  									  $total_outflow_sonstiges_project_year;
  $row_outflow['total'] = 
  			array('data' => _finanzen_format_number($summe_total_outflow_project_year), 
		  		  'class' => 'bold not-empty');
  $rows[] = $row_outflow;
	
  foreach ($row_gesamt as $month_name => $month_data) {
	if ($month_name != "name") {
	  $row_gesamt[$month_name] = _finanzen_format_number($month_data);
      if ($month_data < 0)
	  	$row_gesamt[$month_name] = array('data' => $row_gesamt[$month_name],'class' => 'red');
	  elseif ($month_data > 0)
    	$row_gesamt[$month_name] = array('data' => $row_gesamt[$month_name],'class' => 'green');
      }
      $total_project_year += $month_data;
    }
    
  /*if ($total_project_year > 0)
    $class = "green";
  else*/
  if ($total_project_year < 0)
    $class = "red";
  else
    $class = "";
      
  $row_gesamt['total'] = array('data' => _finanzen_format_number($total_project_year),'class' => $class);
      
  $rows[] = array('data' => $row_gesamt, 'class' => 'bold light-grey not-empty');
  $content .= theme_table($header, $rows, array('class' => 'finanzen reports'));
  
  //$total_studio_year += $total_project_year;

  // Si el proyecto no tiene en ese año gastos ni ingresos no lo pinto
  if (($summe_total_outflow_project_year == 0) && ($total_inflow_project_year == 0))
    $content = "";
    
  return $content;
}




function finanzen_reports_project_detail ($date, $project_id) {
  if ($date == 0) {
    $current_date = time ();
    $first_day_month = _finanzen_first_day_month($current_date);
  }
  else { $first_day_month = $date; }
    
  $empty_row = array();
  $empty_row[] = "";
  
  // Informacion sobre Vertrag, Nachträge, Gewwin, usw
  $content .= finanzen_reports_project_summary ($project_id);
  
  $content .= _finanzen_reports_project_detail_navigator($first_day_month, $project_id);
  
  $project_code = _finanzen_get_project_code($project_id);
  $months_curr_year = _finanzen_list_months_year ($first_day_month);
  $coefs = _finanzen_get_coef_projects_month($months_curr_year);
  	  
  // Inicializo los arrays de usuarios
  $relevant_users = array();
  $relevant_admins = array();
  $relevant_workers = array();
  $relevant_externs = array();
  	  
  /* Con las dos queries siguientes determino que usuarios han acarreado gastos a un proyecto en un año determinado.
  	 Los admisntradores siempre accarean gastos ($relevant_admins) 
  	 Los INNER JOIN con los perfiles son para ordenar la lista - primero trabajadores fijos, luego freelancers */
  $query2 = "SELECT DISTINCT finanzen_timesheet_worker_hours_projects.uid FROM finanzen_timesheet_worker_hours_projects
		     INNER JOIN node ON node.type='profile' AND node.uid = finanzen_timesheet_worker_hours_projects.uid
  	  		 INNER JOIN content_type_profile ON content_type_profile.nid = node.nid
	 		 WHERE date>=" . _finanzen_first_day_year($first_day_month) .
	  	     " AND date<" . _finanzen_get_first_day_next_year($first_day_month) .
		  	 " AND project_id=" . $project_id . 
		  	 " ORDER BY content_type_profile.field_labour_agreement_value";
  $queryResult2 = db_query ( $query2 );	
  while ($single_user = db_fetch_object($queryResult2))
	 $relevant_workers[] = $single_user->uid;
  	  
  $query3 = "SELECT DISTINCT users.uid FROM users
  	  		 INNER JOIN users_roles ON users.uid = users_roles.uid
  	  		 INNER JOIN finanzen_outflow_worker_month ON finanzen_outflow_worker_month.uid = users.uid
  	  		 WHERE users_roles.rid=3 
  			 AND finanzen_outflow_worker_month.date>=" . _finanzen_first_day_year($first_day_month) .
	 	     " AND finanzen_outflow_worker_month.date<" . _finanzen_get_first_day_next_year($first_day_month);
  $queryResult3 = db_query ( $query3 );	
  while ($single_user = db_fetch_object($queryResult3))
	$relevant_admins[] = $single_user->uid;

  $relevant_users = array_merge($relevant_admins, $relevant_workers);
  	  
  $query8 = "SELECT DISTINCT extern_id FROM finanzen_outflow_worker_extern_month
    		 WHERE date>=" . _finanzen_first_day_year($first_day_month) .
	  	     " AND date<" . _finanzen_get_first_day_next_year($first_day_month) .
	 		 " AND project_id=" . $project_id;
  $queryResult8 = db_query ( $query8 );	
  while ($single_user = db_fetch_object($queryResult8))
	$relevant_externs[] = $single_user->extern_id;
  	  
  $rows = array();	  
  $total_project_year = 0;
  $total_hours_project_year = 0;
  $total_inflow_project_year = 0;
  $total_inflow_project_year_paid = 0;
  $total_inflow_project_year_unpaid = 0;  
  $total_outflow_personal_project_year = 0;
  $total_outflow_personal_extern_project_year = 0;
  $total_outflow_sonstiges_project_year = 0;
  $add_personal_project_month_per_user = array();
  $add_extern_project_month_per_user = array();
	  
  $header = array('concept' => array('data' => "",'class' => 'column_concept')) 
  			+ $months_curr_year + array('total' => array('data' => t("Gesamt"),'class' => 'column_total'));
  			
  $row_inflow_all = array('concept' => array('data' => "Zahlungsplan", 'class' => 'not-empty'));
  $row_inflow_paid = array('concept' => array('data' => "Rechnungen", 'class' => 'not-empty'));
  $row_inflow_unpaid = array('concept' => array('data' => "Differenz", 'class' => 'not-empty'));
  
  $row_outflow_personal = array('concept' => array('data' => "Personalkosten", 'class' => 'not-empty'));
  $row_outflow_personal_extern = array('concept' => array('data' => "Beratungen", 'class' => 'not-empty'));
  $row_outflow_sonstiges = array('concept' => array('data' => "Anteil Bürokosten", 'class' => 'not-empty'));
  /* ROW HOURS - comentado pero NO BORRAR */
  //$row_total_hours = array('concept' => array('data' => "Hours personal (% of total)", 'class' => 'not-empty'));
  $row_outflow_total['name'] = "Kosten Gesamt";
  $row_gewinn_euro['name'] = "Gewinn €";
  $row_gewinn_percent['name'] = "Gewinn %";

  foreach ($months_curr_year as $month_name => $month_data ) {
  	  
  	  /* ROW HOURS - comentado pero NO BORRAR */
  	  /*
  	  if ($coefs[$month_name][$project_id]['#coef']) {
	  	  $numb_hours = $coefs[$month_name]['#total_hours'] * $coefs[$month_name][$project_id]['#coef'];
		  $percent = ($coefs[$month_name][$project_id]['#coef'] * 100);
    	  $row_total_hours[] = 
    	  	array('data' => number_format($numb_hours,1,",",".") . "h (" . number_format($percent,1,",",".") 
    	                    . "%)" . "</br><a target='_blank' href=/finanzen/reports/" . $month_data['date'] . ">detail</a>", 
  		          'class' => 'not-empty');
  		    $total_hours_project_year += $numb_hours;
 	  }
	  else {
		  $row_total_hours[] = "0h (0%)";
	  }
	  */
  	  
	  $total_project_month = 0;
	  $total_project_month_paid = 0;
	  $total_project_month_unpaid = 0;	  
	  
	  if (empty($row_gewinn_euro[$month_name])): $row_gewinn_euro[$month_name] = 0; endif;
	  if (empty($row_gewinn_percent[$month_name])): $row_gewinn_percent[$month_name] = 0; endif;
	  if (empty($row_outflow_total[$month_name])): $row_outflow_total[$month_name] = 0; endif;	  
	  	  	
	  /* ROW INFLOW */	  
	  $query4 = "SELECT * from finanzen_inflow
	    		 WHERE project_id=" . $project_id . " AND date=" . $month_data['date'];
	  $queryResult4 = db_query ( $query4 );
	  	  	
	  while ($inflow = db_fetch_object($queryResult4)) {
	 	  $total_project_month += $inflow->spend;
	  	  $total_inflow_project_year += $inflow->spend;
	  	  if ($inflow->paid) {
		  	  $total_project_month_paid += $inflow->spend;
		  	  $total_inflow_project_year_paid += $inflow->spend;
	  	  }
	  	  else {
		  	  $total_project_month_unpaid += $inflow->spend;
		  	  $total_inflow_project_year_unpaid += $inflow->spend;
	  	  }
	  }
		  
	  if ($total_project_month > 0)
  	    $row_inflow_all[] = array('data' => _finanzen_format_number($total_project_month), 'class' => 'not-empty');
  	  else
  	    $row_inflow_all[] = _finanzen_format_number(0);
  	  
  	  if ($total_project_month_paid > 0)
  	    $row_inflow_paid[] = array('data' => _finanzen_format_number($total_project_month_paid), 'class' => 'not-empty');
  	  else
  	    $row_inflow_paid[] = _finanzen_format_number(0);
  	    
  	  if ($total_project_month_unpaid > 0)
  	    $row_inflow_unpaid[] = array('data' => _finanzen_format_number($total_project_month_unpaid), 'class' => 'not-empty');
  	  else
  	    $row_inflow_unpaid[] = _finanzen_format_number(0);
		  
	  /* ROW OUTFLOW PERSONAL */  
	  $query5 = "SELECT uid, spend FROM finanzen_outflow_worker_month
	  			 WHERE date=" . $month_data['date'];
	  $queryResult5 = db_query ( $query5 );	  
		  
	  $outflow_personal_project_month = 0;
	  while ($outflow = db_fetch_object($queryResult5)) {
	  	  $iteration_user = user_load($outflow->uid);
		  // Si el usuario es un administrador, su coeficiente es el general del proyecto ya que los administradores
		  // no aplican horas a proyectos en el timesheet
		  // Si el usuario no es un administrador, uso su coeficiente particular para cada proyecto
		  if (is_array($iteration_user->roles) && in_array('administrator', $iteration_user->roles)) {
			  $outflow_personal_project_month += ($outflow->spend * $coefs[$month_name][$project_id]['#coef']);
			  $outflow_personal_project_month_per_user[$outflow->uid] 
			  	+= ($outflow->spend * $coefs[$month_name][$project_id]['#coef']);
			  $total_outflow_personal_project_year += ($outflow->spend * $coefs[$month_name][$project_id]['#coef']);;
	  	  }
	  	  else {
		  	  $outflow_personal_project_month += ($outflow->spend * $coefs[$month_name][$project_id][$outflow->uid]);
		  	  if (in_array($outflow->uid, $relevant_users)) {
			  	  $outflow_personal_project_month_per_user[$outflow->uid] += 
		  	  		  ($outflow->spend * $coefs[$month_name][$project_id][$outflow->uid]);
		  	  }
		  	  $total_outflow_personal_project_year += ($outflow->spend * $coefs[$month_name][$project_id][$outflow->uid]);
		  }
	  }
		  
	  /* Almaceno en $row_outflow_personal_per_user los datos del trabajador concreto para este año, 
	     siempre que el trabajador sea relevante para el proyecto  */
	  foreach ($relevant_users as $single_user) {
		  if ($outflow_personal_project_month_per_user[$single_user]) {
		  	 $row_outflow_personal_per_user[$single_user][] 
		  	 	= array('data' => _finanzen_format_number($outflow_personal_project_month_per_user[$single_user]), 
  	                    'class' => 'not-empty');

		  	 $add_personal_project_month_per_user[$single_user] += $outflow_personal_project_month_per_user[$single_user];
		   	 $outflow_personal_project_month_per_user[$single_user] = 0;
		  }
		  else
		     $row_outflow_personal_per_user[$single_user][] = _finanzen_format_number(0); 
	  }
		  		  
	  if ($outflow_personal_project_month > 0) {
  	    $row_outflow_personal[] = array('data' => _finanzen_format_number($outflow_personal_project_month), 
  	                                    'class' => 'not-empty');
  	  }
  	  else {
  	    $row_outflow_personal[] = _finanzen_format_number($outflow_personal_project_month); 
	  }
		  
	  /* ROW OUTFLOW PERSONAL EXTERN */  
	  $query6 = "SELECT * FROM finanzen_outflow_worker_extern_month 
 	  			WHERE date=" . $month_data['date'] . " AND project_id=" . $project_id;
	  $queryResult6 = db_query ( $query6 );
		  
	  $outflow_personal_extern_project_month = 0;
	  while ($outflow = db_fetch_object($queryResult6)) {
	  	  $outflow_personal_extern_project_month += $outflow->spend;
	  	  $outflow_personal_extern_project_month_per_user[$outflow->extern_id] += $outflow->spend;
	  	  $total_outflow_personal_extern_project_year += $outflow->spend;
	  }
		  
	  /* Almaceno en $row_outflow_personal_extern_per_user los datos del trabajador concreto para este año, 
	     siempre que el trabajador sea relevante para el proyecto  */
	  foreach ($relevant_externs as $single_user) {
		  if ($outflow_personal_extern_project_month_per_user[$single_user]) {
		  	 $row_outflow_personal_extern_per_user[$single_user][] 
		  	 	= array('data' => _finanzen_format_number($outflow_personal_extern_project_month_per_user[$single_user]), 
  	                    'class' => 'not-empty');
  	         $add_extern_project_month_per_user[$single_user] += $outflow_personal_extern_project_month_per_user[$single_user];
		   	 
		  	 $outflow_personal_extern_project_month_per_user[$single_user] = 0;
		  }
		  else
		     $row_outflow_personal_extern_per_user[$single_user][] = _finanzen_format_number(0); 
	  }
		  
	  if ($outflow_personal_extern_project_month > 0) {
  	    $row_outflow_personal_extern[] = 
  	    	array('data' => _finanzen_format_number($outflow_personal_extern_project_month), 
  	              'class' => 'not-empty');
  	  } 
  	  else {
  	    $row_outflow_personal_extern[] = _finanzen_format_number($outflow_personal_extern_project_month);
  	  }
		  
	  /* ROW OUTFLOW SONSTIGES */
		  
	  $query7 = "SELECT category_id, spend FROM finanzen_outflow_sonstiges_month 
	  			 WHERE date=" . $month_data['date'];
	  $queryResult7 = db_query ( $query7 );
		  
	  $outflow_sontiges_project_month = 0;
	  while ($outflow = db_fetch_object($queryResult7)) {
	  	  $outflow_sontiges_project_month += ($outflow->spend * $coefs[$month_name][$project_id]['#coef']);
	  	  $total_outflow_sonstiges_project_year += ($outflow->spend * $coefs[$month_name][$project_id]['#coef']);
	  }
		  
	  if ($outflow_sontiges_project_month > 0)
  	    $row_outflow_sonstiges[] = array('data' => _finanzen_format_number($outflow_sontiges_project_month), 
  	                                     'class' => 'not-empty');
  	  else
  	    $row_outflow_sonstiges[] = _finanzen_format_number($outflow_sontiges_project_month);
		  
	  $outflow_total_month =  $outflow_personal_project_month + 
	                           $outflow_personal_extern_project_month + 
	  						   $outflow_sontiges_project_month;
	  $row_outflow_total[$month_name] = _finanzen_format_number($outflow_total_month);
	  $row_gewinn_euro[$month_name] = $total_project_month - $outflow_total_month;
	  
	  if ($total_project_month != 0)
	    $row_gewinn_percent[$month_name] = (($row_gewinn_euro[$month_name] * 100) / $total_project_month);
	  else
	    $row_gewinn_percent[$month_name] = 0;						          
  }
  
  /* ROW HOURS - comentado pero NO BORRAR */	  
  /*
  $row_total_hours['total'] = array('data' => number_format($total_hours_project_year,1,",",".") . "h", 
                                    'class' => 'not-empty');
  $rows[] = $row_total_hours;
  */
	  
  $row_inflow_all['total'] = array('data' => _finanzen_format_number($total_inflow_project_year), 
                               'class' => 'not-empty bold');
  $row_inflow_paid['total'] = array('data' => _finanzen_format_number($total_inflow_project_year_paid), 
                                    'class' => 'not-empty bold');
  $row_inflow_unpaid['total'] = array('data' => _finanzen_format_number($total_inflow_project_year_unpaid), 
                                    'class' => 'not-empty bold');                                  
  $rows[] = $row_inflow_all;
  $rows[] = array('data' => $row_inflow_paid, 'class' => 'bold not-empty');  
  $rows[] = array('data' => $row_inflow_unpaid, 'class' => 'bold light-grey not-empty');
  
  $rows[] = array('data' => $empty_row, 'class' => 'empty-row');

  if ($row_outflow_personal_per_user) {
	  foreach ($row_outflow_personal_per_user as $id_user => $row_user) {
	  	  $row_user_final = array('concept' => array('data' => _finanzen_get_user_name($id_user), 
				                                     'class' => 'not-empty')) + $row_user;
		  $row_user_final['total'] = 
			  	array('data' => _finanzen_format_number($add_personal_project_month_per_user[$id_user]), 
  		              'class' => 'not-empty');
  		  $rows[] = array('data' => $row_user_final);
  		  
  		  /*            
	  	  $profile = content_profile_load('profile' , $id_user);
	  	  if ($profile->field_labour_agreement[0]['value'] == "Employee")
  		    $rows[] = array('data' => $row_user_final, 'class' => 'ligth-yellow');
  		  else // Freelancer
  		    $rows[] = array('data' => $row_user_final, 'class' => 'ligth-pink');
  		  */
  		  
	  }
	  $row_outflow_personal_per_user = "";
  }
	  
  $row_outflow_personal['total'] = 
  			array('data' => _finanzen_format_number($total_outflow_personal_project_year), 'class' => 'bold not-empty');
  $rows[] = array('data' => $row_outflow_personal, 'class' => 'bold light-grey not-empty');
  $rows[] = array('data' => $empty_row, 'class' => 'empty-row');
	  
  if ($row_outflow_personal_extern_per_user) {
	  foreach ($row_outflow_personal_extern_per_user as $id_user => $row_user) {
	  	  $row_user_extern_final = array('concept' => array('data' => _finanzen_get_extern_name($id_user), 
		                                 'class' => 'not-empty')) + $row_user;
		  $row_user_extern_final['total'] = 
		  		array('data' => _finanzen_format_number($add_extern_project_month_per_user[$id_user]), 
		  		 	  'class' => 'not-empty');                             
		  $rows[] = array('data' => $row_user_extern_final);
	  }
	  $row_outflow_personal_extern_per_user = "";
  }

  $row_outflow_personal_extern['total'] = 
  			array('data' => _finanzen_format_number($total_outflow_personal_extern_project_year), 
		  		  'class' => 'bold not-empty');
  $rows[] = array('data' => $row_outflow_personal_extern, 'class' => 'bold light-grey not-empty');
  $rows[] = array('data' => $empty_row, 'class' => 'empty-row');
  	  	  
  $row_outflow_sonstiges['total'] = 
  			array('data' => _finanzen_format_number($total_outflow_sonstiges_project_year), 
		  		  'class' => 'bold not-empty');
  $rows[] = array('data' => $row_outflow_sonstiges, 'class' => 'bold light-grey not-empty');
	  
  $row_outflow_total['total'] = 
  			array('data' => _finanzen_format_number($total_outflow_sonstiges_project_year), 
		  		  'class' => 'bold not-empty');
  $rows[] = array('data' => $row_outflow_total, 'class' => 'bold grey not-empty');
  $rows[] = array('data' => $empty_row, 'class' => 'empty-row');
	
  foreach ($row_gewinn_euro as $month_name => $month_data) {
	if ($month_name != "name") {
	  $row_gewinn_euro[$month_name] = _finanzen_format_number($month_data);
      if ($month_data < 0)
	  	$row_gewinn_euro[$month_name] = array('data' => $row_gewinn_euro[$month_name],'class' => 'red');
	  elseif ($month_data > 0)
    	$row_gewinn_euro[$month_name] = array('data' => $row_gewinn_euro[$month_name],'class' => 'green');
    }
    $total_project_year += $month_data;
  }
    
  if ($total_project_year > 0)
    $class = "green";
  elseif ($total_project_year < 0)
    $class = "red";
  else
    $class = "";
      
  $row_gewinn_euro['total'] = array('data' => _finanzen_format_number($total_project_year),'class' => $class);
  $rows[] = array('data' => $row_gewinn_euro, 'class' => 'not-empty bold grey');
  
  foreach ($row_gewinn_percent as $month_name => $month_data) {
	if ($month_name != "name") {
	  $row_gewinn_percent[$month_name] = _finanzen_format_percent($month_data);
      if ($month_data < 0)
	  	$row_gewinn_percent[$month_name] = array('data' => $row_gewinn_percent[$month_name],'class' => 'red');
	  elseif ($month_data > 0)
    	$row_gewinn_percent[$month_name] = array('data' => $row_gewinn_percent[$month_name],'class' => 'green');
    }
    //$total_project_year += $month_data;
  }
  
  $row_gewinn_percent['total'] = array('data' => _finanzen_format_number($total_project_year),'class' => $class);
  $rows[] = array('data' => $row_gewinn_percent, 'class' => 'bold grey not-empty');
  
  $content .= theme_table($header, $rows, array('class' => 'finanzen reports'));

  return $content;
}


function finanzen_reports_summary_projects ( $date = 0 ) {
  
  if ($date == 0) {
    $current_date = time ();
    $first_day_month = _finanzen_first_day_month($current_date);
  }
  else { $first_day_month = $date; }
  
  $months_curr_year = _finanzen_list_months_year ($first_day_month);
  $coefs = _finanzen_get_coef_projects_month($months_curr_year);
  
  $query = "SELECT og.nid FROM og 
  			INNER JOIN content_type_group ON content_type_group.nid = og.nid 
  			ORDER BY content_type_group.field_project_code_value";
  $queryResult = db_query ( $query );
  $num_proj = db_affected_rows();
  $i = 0;
  
  while ($project = db_fetch_object($queryResult)) {
  	if (($i % 4) == 0)
  	  $content .= '<div class="row_finanzen_klein clearfix">';
  	
  	$project_code = _finanzen_get_project_code($project->nid);
  	$content .= '<div class="div_finanzen_klein">' . _finanzen_link_to_project ($project->nid, $first_day_month) . 
  	             finanzen_reports_project_summary($project->nid, TRUE) . '</div>';
 
  	if ((($i % 4) == 3) || (($num_proj == ($i-1))))
  	  $content .= '</div>';
   	$i++;

  }

  return $content;
}


function finanzen_reports_project_general ( $date = 0 ) {
  
  if ($date == 0) {
    $current_date = time ();
    $first_day_month = _finanzen_first_day_month($current_date);
  }
  else { $first_day_month = $date; }
  
  $content .= _finanzen_reports_project_general_navigator($first_day_month);
  
  //$total_studio_year = 0;
  
  $query = "SELECT og.nid FROM og
  			INNER JOIN content_type_group ON content_type_group.nid = og.nid
  			ORDER BY content_type_group.field_project_code_value";
  $queryResult = db_query ( $query );
  
  while ($project = db_fetch_object($queryResult)) {
  	//$content .= finanzen_reports_project_basis($date, $project->nid, $total_studio_year);
  	$content .= finanzen_reports_project_basis($date, $project->nid);
  }
  
  return $content;
}

function _finanzen_reports_project_general_navigator($date)
{ 
  $content .= '<div class="navigator">';
  $content .= '<div class="navigator-back"><a href="/finanzen/' . $date . '"> &#8592; zurück</a></div>';
  $content .= '<div class="navigator-title black bold">Jahresübersicht aller Projekte</div>';
  $content .= '<div class="navigator-next">';
  
  if (time() > _finanzen_get_first_day_next_year($date)) {
    $content .= '<a title="Go to next year" href="/finanzen/reports/projects/general/' 
	            . _finanzen_get_first_day_next_year($date) . '"> &#8811; </a>';
  }
  else 
    $content .= '<span class="muted"> &#8811; </span>';
  
  $content .= "</div>";
  
  $content .= '<div class="navigator-date black">' . date('Y', $date) . "</div>";
   
  $content .= '<div class="navigator-prev">';
  if ($date > ABSOLUTE_INITIAL_TIME) {
  	$content .= '<a title="Go to previous year" href="/finanzen/reports/projects/general/' 
  	            . _finanzen_get_first_day_previous_year($date) . '"> &#8810; </a>';
  }
  else
    $content .= '<span class="muted"> &#8810; </span>';
  
  $content .= "</div>";
  
  $content .= "</div>"; // class="navigator"
   
  return $content;     
}


/* --- PEQUEÑO RESUMEN PARA CADA PROYECTO --- */

function _finanzen_outflow_total_project($project_id) {
	
	$total = 0;
	
	$date_first_outflow_project = _finanzen_date_first_outflow_project($project_id);
	$first_day_month_first_outflow_project = _finanzen_first_day_month($date_first_outflow_project);
	$date_last_outflow_project = _finanzen_date_last_outflow_project($project_id);
	$first_day_month_last_outflow_project = _finanzen_first_day_month($date_last_outflow_project);
		
	$list_months = _finanzen_list_months($first_day_month_first_outflow_project, $first_day_month_last_outflow_project);
	$coefs = _finanzen_get_coef_projects_month($list_months);
	
	/* TOTAL OUTFLOW PERSONAL & TOTAL OUTFLOW SONSTIGES */
	$total_outflow_personal_project = 0;
	$total_outflow_sonstiges_project = 0;
	foreach ($list_months as $month_name => $month_data ) {
		
		/* TOTAL OUTFLOW PERSONAL */
		$query = "SELECT uid, spend FROM finanzen_outflow_worker_month
				   WHERE date=" . $month_data['date'];
		$queryResult = db_query ( $query );	  
	
		while ($outflow = db_fetch_object($queryResult)) {
		  $iteration_user = user_load($outflow->uid);
	      // Si el usuario es un administrador, su coeficiente es el general del proyecto ya que los administradores
		  // no aplican horas a proyectos en el timesheet
		  // Si el usuario no es un administrador, uso su coeficiente particular para cada proyecto
		  if (is_array($iteration_user->roles) && in_array('administrator', $iteration_user->roles))
		    $total_outflow_personal_project += ($outflow->spend * $coefs[$month_name][$project_id]['#coef']);
		  else
	        $total_outflow_personal_project += ($outflow->spend * $coefs[$month_name][$project_id][$outflow->uid]);
		}
		
		/* TOTAL OUTFLOW SONSTIGES */
		$query2 = "SELECT category_id, spend FROM finanzen_outflow_sonstiges_month 
	  			 WHERE date=" . $month_data['date'];
	    $queryResult2 = db_query ( $query2 );
	    
	    while ($outflow = db_fetch_object($queryResult2)) {
	  	  $total_outflow_sonstiges_project += ($outflow->spend * $coefs[$month_name][$project_id]['#coef']);
	    }
			
	}  
	
	/* TOTAL OUTFLOW PERSONAL EXTERN */
	$query3 = "SELECT * FROM finanzen_outflow_worker_extern_month WHERE project_id=" . $project_id;
	$queryResult3 = db_query($query3);
		  
	$total_outflow_personal_extern_project = 0;
	while ($outflow = db_fetch_object($queryResult3)) {
	   $total_outflow_personal_extern_project += $outflow->spend;
	}
	
	return $total_outflow_personal_extern_project + 
	       $total_outflow_sonstiges_project + 
	       $total_outflow_personal_project;
}


function finanzen_reports_project_summary ( $project_id, $home_finanzen = FALSE ) {
    
    /* --- VERTRAG --- */
	$query = "SELECT * FROM finanzen_inflow_contract_project 
	          WHERE category=0 AND project_id=" . $project_id;
	$queryResult = db_query ($query);
	
	if ($elem = db_fetch_object($queryResult))
	  $vertrag = $elem->spend;
	else
	  $vertrag = 0;
		
	if (!$home_finanzen) 
	  $link_to_edit_vertrag = 'Vertrag <a href="/finanzen/project/edit-contract/' . $project_id . '">(edit)</a>';
	else
	  $link_to_edit_vertrag = 'Vertrag';
	  
	$row = array('concept' => array('data' => $link_to_edit_vertrag, 'class' => 'not-empty bold')) + 
	       array('total' => array('data' => _finanzen_format_number($vertrag), 'class' => 'not-empty bold'));
	$rows[] = array('data' => $row, 'class' => 'light-grey');
	
	/* --- NACHTRÄGE --- */
	$query = "SELECT * FROM finanzen_inflow_contract_project
	          WHERE category>0 AND spend!=0 AND project_id=" . $project_id;
	$queryResult = db_query ($query);

	$nachtraege_total = 0;
	while ($elem = db_fetch_object($queryResult)) {
	  $nachtraege_total += $elem->spend;
	  $row = array('concept' => array('data' => "Nachtrag " . $elem->category, 'class' => 'not-empty')) + 
	    	 array('total' => array('data' => _finanzen_format_number($elem->spend), 'class' => 'not-empty'));
	  $rows[] = array('data' => $row);
	}
	
	/* --- GESTELLTE RECHNUNGEN --- */
	$query = "SELECT * FROM finanzen_inflow
	          WHERE project_id=" . $project_id;
	$queryResult = db_query ($query);
	
	$rechnungen_total = 0;
	while ($elem = db_fetch_object($queryResult)) {
		$rechnungen_total += $elem->spend;
	}
	
	$row = array('concept' => array('data' => "Gestellte Rechnungen", 'class' => 'not-empty')) + 
    	   array('total' => array('data' => _finanzen_format_number($rechnungen_total), 'class' => 'not-empty'));
    $rows[] = $row;
	
	/* --- DIFFERENZ --- */
	$differenz_total = ($vertrag + $nachtraege_total) - $rechnungen_total;
	$row = array('concept' => array('data' => "Differenz", 'class' => 'not-empty')) + 
    	   array('total' => array('data' => _finanzen_format_number($differenz_total), 'class' => 'not-empty'));
    $rows[] = $row;
    
    /* --- KOSTEN --- */
    $kosten_total = _finanzen_outflow_total_project($project_id);
    $row = array('concept' => array('data' => "Kosten", 'class' => 'not-empty')) + 
    	   array('total' => array('data' => _finanzen_format_number($kosten_total), 'class' => 'not-empty'));
    $rows[] = $row;
	
    /* --- GEWINN --- */
    $gewwin_total = $rechnungen_total - $kosten_total;
	$row = array('concept' => array('data' => "Gewinn", 'class' => 'not-empty bold')) + 
    	   array('total' => array('data' => _finanzen_format_number($gewwin_total), 'class' => 'not-empty bold'));
    $rows[] = array('data' => $row, 'class' => 'light-grey');
    
    /* --- GEWINNANTEIL --- */
    if ($rechnungen_total != 0)
      $gewwinanteil_total = (($gewwin_total * 100) / $rechnungen_total);
    else
      $gewwinanteil_total = 0;
      
    $row = array('concept' => array('data' => "Gewinnanteil", 'class' => 'not-empty bold')) + 
    	   array('total' => array('data' => _finanzen_format_percent($gewwinanteil_total), 'class' => 'not-empty bold'));
    $rows[] = array('data' => $row, 'class' => 'light-grey');


	$content .= theme_table($header, $rows, array('class' => 'finanzen-klein reports'));
	
	return $content;

}

function _finanzen_project_edit_contract_navigator ( $project_id )
{
  $current_date = time();
  $content .= '<div class="navigator">';
  $content .= '<div class="navigator-back"><a href="/finanzen/reports/project/' 
              . $current_date . '/' . $project_id . '"> &#8592; zurück</a></div>';
  $content .= '<div class="navigator-title bold black">' . _finanzen_get_project_code($project_id) . '</div>';
  $content .= '</div>';
  
  return $content;
}

function finanzen_project_edit_contract ( $project_id )
{
  $content .= _finanzen_project_edit_contract_navigator ($project_id);
  $content .= drupal_get_form ('finanzen_project_edit_contract_form', $project_id);
  return $content;
}

function finanzen_project_edit_contract_form ( $form, $project_id )
{
  // Clean the $form 
  $form = array ();
  
  $query = "SELECT * FROM finanzen_inflow_contract_project 
            WHERE project_id=" . $project_id . " ORDER BY category";
  $queryResult = db_query ($query);
    
  $index = 0;
  while ($elem = db_fetch_object($queryResult)) {
    $index++;
  	$form[$project_id][$elem->category] = array (
	   'spend' => array ( '#type' => 'textfield',
	                      '#default_value' => $elem->spend,
	                      '#weight' => 1,
	                      '#required' => TRUE,
	                      '#prefix' => '<div class="outflow-personal-spend-field modified">',
	                      '#suffix' => '€</div>',      
                        ),
	    'id' => array ( '#type' => 'hidden' , "#default_value" => $elem->nid ),
	);	
  }
  
  $form[$project_id][$index] = array (
	   'spend' => array ( '#type' => 'textfield',
	                      '#default_value' => 0,
	                      '#weight' => 1,
	                      '#required' => TRUE,
	                      '#prefix' => '<div class="outflow-personal-spend-field">',
	                      '#suffix' => '€</div>'     
                        ),
	    'id' => array ( '#type' => 'hidden', "#default_value" => NULL ),
  );
  
  // Add submit button
  $form['submit'] = array (
      '#type' => 'submit',
      '#value' => t('Save'),
  );
  // Add theming function
  $form['#theme'] = 'finanzen_project_edit_contract_form_theme';
  // This line is needed in order to keep the tree structure in form_state
  $form['#tree'] = TRUE;
  // Add redirection
  $form['#redirect'] = 'finanzen/reports/project/' . time() . '/' . $project_id;
  
  return $form; 
}


function theme_finanzen_project_edit_contract_form_theme ( $form ) {
     
  //$header = array('name' => t("Name"), 'spend' => t("Spend"));
  
  //Get key value for the first array element
  $project_id = current(array_keys($form));
  
  $first_child = reset($form);

  foreach (element_children($first_child) as $elem) {
    $rowdata = array();
    if ($elem == 0)
      $rowdata[] = "Vertrag";
    else
      $rowdata[] = "Nachtrag " . $elem;
      
    $rowdata[] = drupal_render($form[$project_id][$elem]['spend']);
    $row = array('data' => $rowdata);
    $rows[] = $row;
  }
  
  // This is where we create the table using theme()
  $output .= theme('table', $header, $rows, array('class' => 'finanzen'));
  
  $output .= drupal_render($form);
  return $output;
}


function finanzen_project_edit_contract_form_validate ( $form, &$form_state ) {

  $project_id = current(array_keys($form));
  foreach (element_children($form_state['values'][$project_id]) as $elem) {
    if (!(is_numeric($form_state['values'][$project_id][$elem]['spend']))) {
      form_set_error("$project_id][$elem][spend", t('Spend: You must enter a numeric value.'));
    }
  }
}


function finanzen_project_edit_contract_form_submit ( $form, &$form_state )
{
  $project_id = current(array_keys($form));
    
  foreach (element_children($form_state[$project_id]) as $elem) {
  	$spend = $form_state['values'][$project_id][$elem]['spend'];
  	$reg_id = $form_state['values'][$project_id][$elem]['id'];
  	
  	if ($reg_id) { // DB Register already exists
	  $query = "UPDATE finanzen_inflow_contract_project SET spend=" . $spend . 
	           " WHERE nid=" . $reg_id;
	  $queryResult = db_query ($query);
    } 
    else { // DB Register does not exists
      if ($form_state['values'][$project_id][$elem]['spend'] != 0) {
	    $query = "INSERT INTO finanzen_inflow_contract_project ( project_id, spend, category )
                  values ( %d, %d, %d )";
        $queryResult = db_query ( $query, $project_id, $spend, $elem );
      }
    }
  }
  
  if ($queryResult)
      drupal_set_message("Changes saved correctly", "status");
}

